const bcrypt = require('bcrypt')
const User = require('../models/userSchema')
const Product=require("../models/productSchema")
const otp = require('../controllers/otp');
const { cartCount } = require('./shoppingCartController');



// this function is used for signing up new user 
exports.postSignup = async (req,res,next)=>{
    console.log("hai");
    try{
        console.log("signup");
        const existingUser = await User.findOne({name:req.body.name})
        if(existingUser){
            console.log(`User with name ${req.body.name} already exist`);

            res.redirect('/login')

        }
        else{
            const hashedPassword = await bcrypt.hash(req.body.password, 10);
            console.log(hashedPassword);
            const newUser = new User({
                id:Date.now().toString(),
                name:req.body.name,
                mobile:req.body.mobile,
                email:req.body.email,
                password:hashedPassword,
                status:false,
                isActive:true,
            });
            User.create(newUser);
            console.log(newUser);
            res.redirect("/login");

        }
    }catch(error){
        console.log(error);
        res.redirect("/signup");
    }
};




// this function is used to login for the user
 
exports.postLogin = async (req,res)=>{
    try{
      console.log(req.body.name)
        // console.log(req.body,'nnnnnn');
        const newUser = await User.findOne({email:req.body.email,isActive:true});
            console.log(newUser);
            if(newUser){

                bcrypt.compare(req.body.password, newUser.password).then((status)=>{
                    if(status){
                        console.log("User Exist");
                        req.session.user = newUser;
                        req.session.userloggedIn = true;
                        console.log(newUser);
                        res.redirect("/");
                    }else{
                        req.session.loginErr = "invalid Email or Password";
                        console.log("password is not matching");
                        res.status(400).redirect("/login");
                    }
                });
            }
        }  catch(error){
            console.log(error);
    }
        };

                
      
      // this function is used to get the login page


      exports.getLogin= function(req, res, next) {
        let user = req.session.user;
          res.render('user/login',{noShow:true,user})
    };

// this is used to get the signup page
    exports.getSignup = function(req,res,next){
      res.render('user/signup',{noShow:true})
    };

// this function is used to check whether the user already existing or not by using findone method of mongp db.
    exports.emailVerify= async (req, res, next) => {
      const response = {};
      try {
        const vUser = await User.findOne({
          $or: [{ email: req.body.email }, { mobile: req.body.mobile }],
        }).exec();
        if (vUser) {
          response.success = false;
          res.status(500).send({
            response,
            success: false,
            message: "User found",
          });
        } else {
          res.status(200).send({ success: true, message: "No user found" });
        }
      } catch (error) {
        console.log(error);
        res.status(500).send({ success: false, message: "Error verifying user" });
      }
    },
    
    //otp send and verifications
    exports.sendOtp= async (req, res, next) => {
      const response = {};
      try {
        console.log(req.body.mobile);
        if (!req.session.otP) {
          req.session.otP = Math.floor(100000 + Math.random() * 900000);
        } else {
        }
        console.log(req.session.otP);
        otp
          .OTP(req.body.mobile, req.session.otP)
          .then((response) => {
            console.log("aaaaa");
            response.success = true;
            console.log(response);
    
            res.status(200).send({
              response,
              success: true,
              message: "OTP Sent successfully",
            });
          })
          .catch((error) => {
            console.log("gggg");
            res
              .status(500)
              .send({ success: false, message: "Error sending OTP" });
          });
      } catch (error) {
        console.log(error);
      }
    },
    // to varity the otp entered by the user with the otp generated by the service.
    exports.verifyOtp= async (req, res, next) => {
      const response = {};
      try {
        if (parseInt(req.body.userOtp) === req.session.otP) {
          res.status(200).send({
            success: true,
            response,
            message: "OTP verified successfully",
          });
        } else {
          req.session.errmsg = "Invalid Otp";
          res.status(500).send({ success: false, message: "Invalid Otp" });
        }
      } catch (error) {
        console.log(error);
        }
      }
  

    // this function is used to render the landing page
      exports.index=async function (req, res, next) {
        try{
        
          const products = await Product.find();
          var cartCount = req.cartCount;
          const user = req.session.user || ''
          const username = user.name;
         
          res.render('user/index',{userloggedIn:req.session.userloggedIn,products,cartCount,username})
        }catch(error){
          console.log(error);
        }  
      };
// this function is also used to render home page 

      exports.main=async function (req, res, next) {
        try{
        
          const products = await Product.find();
          var cartCount = req.cartCount;
          console.log(cartCount)
          const user = req.session.user || ''
          const username = user.name;
          
      
          res.render('user/index',{userloggedIn:req.session.userloggedIn,products,cartCount,username})
        }catch(error){
          console.log(error);
        }
      };

      



//this function is used to render the product page.
      // exports.home=async function (req, res, next) {
      //   try{
      //     let page = req.query.page
      //     let perPage = 4
      //     let docCount
      //     const products = await Product.find().count()
      //             .then(total => {
      //               docCount = total
      //               return Product.find().skip((page-1) * perPage).limit(perPage)
      //             })
      //     var cartCount = req.cartCount;
      //     const user = req.session.user || ''
      //     const username = user.name;
      //     console.log(username);
          
          
      //     res.render('user/productMen',{
      //       userloggedIn:req.session.userloggedIn,
      //       products,
      //       cartCount,
      //       username,
      //       totalPages: Math.ceil(docCount / perPage),
      //       page,
      //       perPage
      //     })
      //   }catch(error){
      //     console.log(error);
      //  }
      // };
      exports.home = async function (req, res, next) {
        try {
          const page = parseInt(req.query.page) || 1;
          const perPage = 4;
          const docCount = await Product.countDocuments({});
          const products = await Product.find()
            .skip((page - 1) * perPage)
            .limit(perPage);
          const cartCount = req.cartCount;
          const user = req.session.user || '';
          const username = user.name;
          
          res.render('user/productMen', {
            userloggedIn: req.session.userloggedIn,
            products,
            cartCount,
            username,
            totalPages: Math.ceil(docCount / perPage),
            currentPage: page,
            perPage
          });
        } catch (error) {
          console.log(error);
        }
      };
      

//this function is used to show the detailed product view. it will render the detailed product view page.
      exports.detail=async function (req, res, next) {
        try{


          let id = req.params.id;
          var cartCount = req.cartCount;
          
          const oneProduct = await Product.findById(id);
          const user = req.session.user || ''
          const username = user.name;
          
          res.render('user/productDetail',{userloggedIn:req.session.userloggedIn,oneProduct,cartCount,username})
        }catch(error){
          console.log(error);
       }
      };
      // exports.Women=async function (req, res, next) {
      //   try{
      //     const products = await Product.find();
      //     res.render('user/productWomen',{products})
      //   }catch(error){
      //     console.log(error);
      //   }  
      // };
  